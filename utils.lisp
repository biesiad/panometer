(defun make-smooth (count)
  (let ((samples '())
	(sum-temperature 0)
	(sum-humidity 0)
	(sum-height 0)
	(sum-luminosity 0))
    (lambda (sample)
      (push sample samples)
      (cond ((<= (length samples) count)
	     (addf sum-temperature (sample-temperature sample))
	     (addf sum-humidity (sample-humidity sample))
	     (addf sum-height (sample-height sample))
	     (addf sum-luminosity (sample-luminosity sample)))
	     (t
	      (running-addf sum-temperature 'temperature sample samples)
	      (running-addf sum-humidity 'humidity sample samples)
	      (running-addf sum-height 'height sample samples)
	      (running-addf sum-luminosity 'luminosity sample samples)
	      (setf samples (reverse (rest (reverse samples))))))
      (make-sample
       :experiment (sample-experiment sample)
       :temperature (/ sum-temperature (length samples))
       :humidity (/ sum-humidity (length samples))
       :height (/ sum-height (length samples))
       :luminosity (/ sum-luminosity (length samples))))))
